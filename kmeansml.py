# -*- coding: utf-8 -*-
"""kmeansML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pcf4oUKct_nqoXCub84XEWGiLLd1EzFe
"""

import pandas as pd # learn more: https://python.org/pypi/pandas
import numpy as np
import random
import math
import copy

df = pd.read_csv('https://raw.githubusercontent.com/machine-learning-course/syllabus/gh-pages/hiw-2019b/dataset-students-ml-2019b.csv')
df['nim'] = df['nim'].astype(str)

def calculateMeanDistance(final_df,centroid):
    value_l = []
    for index, row in final_df.iterrows():
        value = euclideanDistance([row['gender'],row['birth_date'],row['shirt_height']],centroid)
        value_l.append(value)
    return sum(value_l)/len(value_l)
 
def euclideanDistance(p1,p2):
    value = pow((p1[0] - p2[0]),2) + pow((p1[1] - p2[1]),2) + pow((p1[2] - p2[2]),2)
    return math.sqrt(value)
 
def newCentroid(new_df,new_coor_centroid):
    coor_centroid = []
    for x in range(5):
        sum_gender = 0
        sum_birth_date = 0
        sum_shirt_height = 0
        filtered_df = new_df[new_df['centroid'] == x]
        
        if filtered_df.shape[0] != 0:
            for index, row in filtered_df.iterrows():
                sum_gender += row['gender']
                sum_birth_date += row['birth_date']
                sum_shirt_height += row['shirt_height']

            if filtered_df.shape[0] == 0:
                print(filtered_df)

            mean_gender = sum_gender/filtered_df.shape[0]
            mean_birth_date = sum_birth_date/filtered_df.shape[0]
            mean_shirt_height = sum_shirt_height/filtered_df.shape[0]
            coor = [mean_gender,mean_birth_date,mean_shirt_height]
        else:
            coor = new_coor_centroid[x]
        coor_centroid.append(coor)
        
    return coor_centroid
 
# ambil 3 parameter kelompok F
new_df = df[['gender', 'birth_date', 'shirt_height']].copy()

# mengambil tahun pada birth_date
for index, row in new_df.iterrows():
    split_date = row['birth_date'].split('-')
    new_df.loc[index,'birth_date'] = split_date[0]
    
# ubah categorical data menjadi numeric
new_df.loc[new_df['gender'] == 'Male', 'gender'] = 1
new_df.loc[new_df['gender'] == 'Female', 'gender'] = 2

# ubah gender, birth_date menjadi int
new_df = new_df.astype({"gender":'int64', "birth_date":'int64'})

# Create empty column to store closest centroid
new_df["centroid"] = 0
print(new_df)
# Initialize the first three centroids
initial_centroid = []
for x in range(5):
    value = random.randint(0, new_df.shape[0]-1)
    while value in  initial_centroid:
        value = random.randint(0, new_df.shape[0]-1)
    initial_centroid.append(value)
 
# First iteration to get the initial centroid
for index, row in new_df.iterrows():
    dist_l = []
    p1 = [row['gender'],row['birth_date'],row['shirt_height']]
    
    for x in range(5):
        p2 = [new_df.loc[initial_centroid[x],'gender'],new_df.loc[initial_centroid[x],'birth_date'],new_df.loc[initial_centroid[x],'shirt_height']]
        value = pow((p1[0] - p2[0]),2) + pow((p1[1] - p2[1]),2) + pow((p1[2] - p2[2]),2)
        dist_l.append(math.sqrt(value))
      
    row['centroid'] = np.argmin(dist_l)

# meng spwan centroid
new_coor_centroid = []
for x in range(5):
    point = [new_df.loc[initial_centroid[x],'gender'],new_df.loc[initial_centroid[x],'birth_date'],new_df.loc[initial_centroid[x],'shirt_height']]
    new_coor_centroid.append(point)
 
# Iteration to find the cluster
while True:
    new_centroid = newCentroid(new_df,new_coor_centroid)
    new_coor_centroid = copy.deepcopy(new_centroid)
    prev_df = copy.deepcopy(new_df)
    for index, row in new_df.iterrows():
        dist_l = []
        p1 = [row['gender'],row['birth_date'],row['shirt_height']]
        
        for x in range(5):
            distance = euclideanDistance(p1, new_centroid[x])
            dist_l.append(distance)
            
        row['centroid'] = np.argmin(dist_l)
    
    prev_1 = prev_df[prev_df['centroid'] == 0]
    prev_2 = prev_df[prev_df['centroid'] == 1]
    prev_3 = prev_df[prev_df['centroid'] == 2]
    prev_4 = prev_df[prev_df['centroid'] == 3]
    prev_5 = prev_df[prev_df['centroid'] == 4]
    
    current_1 = new_df[new_df['centroid'] == 0]
    current_2 = new_df[new_df['centroid'] == 1]
    current_3 = new_df[new_df['centroid'] == 2]
    current_4 = new_df[new_df['centroid'] == 3]
    current_5 = new_df[new_df['centroid'] == 4]
    if prev_1.equals(current_1) and prev_2.equals(current_2) and prev_3.equals(current_3) and prev_4.equals(current_4) and prev_5.equals(current_5):
        break;

mean_distance_1 = calculateMeanDistance(current_1,new_coor_centroid[0])
mean_distance_2 = calculateMeanDistance(current_2,new_coor_centroid[1])
mean_distance_3 = calculateMeanDistance(current_3,new_coor_centroid[2])
mean_distance_4 = calculateMeanDistance(current_1,new_coor_centroid[3])
mean_distance_5 = calculateMeanDistance(current_2,new_coor_centroid[4])
# TODO: Your k-means algorithm here
print('Model Code: F')
clus = 1
print("-------------------")
for i in range(66):

  if new_df['centroid'][i] == 0:
    print('%s,%s,%0.4f' % (df['nim'][i], new_df['centroid'][i],mean_distance_1))
    clus == new_df['centroid'][i]
    
  elif new_df['centroid'][i] == 1:
    print('%s,%s,%0.4f' % (df['nim'][i], new_df['centroid'][i],mean_distance_2))
    clus == new_df['centroid'][i]
    
  elif new_df['centroid'][i] == 2:
    print('%s,%s,%0.4f' % (df['nim'][i], new_df['centroid'][i],mean_distance_3))
    clus == new_df['centroid'][i]
    
  elif new_df['centroid'][i] == 3:
    print('%s,%s,%0.4f' % (df['nim'][i], new_df['centroid'][i],mean_distance_4))
    clus == new_df['centroid'][i]
    
  elif new_df['centroid'][i] == 4:
    print('%s,%s,%0.4f' % (df['nim'][i], new_df['centroid'][i],mean_distance_5))
    clus == new_df['centroid'][i]